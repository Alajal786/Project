package com.sutherland.library.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.sutherland.library.entity.Book;
import com.sutherland.library.exceptions.BookNotPresentException;
import com.sutherland.library.service.BookService;

@RestController
@RequestMapping("/book")

@CrossOrigin(origins = "http://localhost:3000")
public class BookController {
	@Autowired
	BookService service;
	
	@PostMapping
	public ResponseEntity<String> addBook(@RequestBody Book book) {
		service.addBook(book);
		return new ResponseEntity<String>("book inserted",HttpStatus.OK);
	}
	
	@GetMapping
	public ResponseEntity<List<Book>> getAllBooks(){
		return new ResponseEntity<List<Book>>(service.getAllBooks(),HttpStatus.OK);
	}
	@GetMapping("/byid/{bookid}")
	public Book getBookById(@PathVariable int bookid) {
		return service.getBookById(bookid);
	}
	
	/*@GetMapping("/byauthor/{author}")
	public ResponseEntity<List<Book>> getBooksByAuthor(@PathVariable String author) {
	    List<Book> books = service.getBooksByAuthor(author);
	    return new ResponseEntity<>(books, HttpStatus.OK);
	}

	@GetMapping("/bytitle/{title}")
	public ResponseEntity<List<Book>> getBooksByTitle(@PathVariable String title) {
	    List<Book> books = service.getBooksByTitleLike(title);
	    return new ResponseEntity<>(books, HttpStatus.OK);
	}*/
	
	@GetMapping("/byauthor/{author}")
	public ResponseEntity<List<Book>> getBooksByAuthor(@PathVariable String author) {
	    List<Book> books = service.getBooksByAuthor(author);
	    if (books.isEmpty()) {
	        throw new BookNotPresentException("No books found by author: " + author);
	    }
	    return new ResponseEntity<>(books, HttpStatus.OK);
	}

	@GetMapping("/bytitle/{title}")
	public ResponseEntity<List<Book>> getBooksByTitle(@PathVariable String title) {
	    List<Book> books = service.getBooksByTitleLike(title);
	    if (books.isEmpty()) {
	        throw new BookNotPresentException("No books found with title containing: " + title);
	    }
	    return new ResponseEntity<>(books, HttpStatus.OK);
	}
	@DeleteMapping("/book/{id}")
	public ResponseEntity<Void> deleteBook(@PathVariable int id){
		service.deleteBook(id);
		return ResponseEntity.noContent().build();
	}
	
}
